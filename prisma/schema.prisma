// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js用テーブル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 会社テーブル
model Company {
  id               String   @id @default(cuid())
  name             String
  timezone         String   @default("Asia/Tokyo")
  payrollRounding  String   @default("ROUND") // ROUND, FLOOR, CEIL
  breakPolicyText  String?  // JSON文字列として保存
  standardWorkHours Int     @default(480) // 標準労働時間（分）
  overtimeSettings String?  // JSON文字列として保存
  gpsRequired      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  users          User[]
  sites          Site[]
  alerts         Alert[]
  auditLogs      AuditLog[]
}

// ユーザー（従業員・管理者）テーブル
model User {
  id               String    @id @default(cuid())
  companyId        String?
  role             String    @default("EMPLOYEE") // ADMIN, MANAGER, EMPLOYEE
  name             String
  email            String    @unique
  emailVerified    DateTime?
  password         String?
  phone            String?
  address          String?
  position         String?   // 職位
  department       String?   // 部署
  hireDate         DateTime? // 入社日
  hourlyWage       Float?
  employmentType   String?   // 雇用形態
  emergencyContact String?   // 緊急連絡先氏名
  emergencyPhone   String?   // 緊急連絡先電話番号
  notes            String?   // 備考
  status           String    @default("ACTIVE") // ACTIVE, INACTIVE
  active           Boolean   @default(true)
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  company    Company? @relation(fields: [companyId], references: [id])
  accounts   Account[]
  sessions   Session[]
  attendances Attendance[]
  auditLogs  AuditLog[]
}

// 現場テーブル
model Site {
  id             String    @id @default(cuid())
  companyId      String
  name           String
  address        String?
  latitude       Float?
  longitude      Float?
  geofenceRadius Int?      // メートル単位
  client         String?   // 発注者
  startDate      DateTime?
  endDate        DateTime?
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  company     Company @relation(fields: [companyId], references: [id])
  attendances Attendance[]
}

// 出勤記録テーブル
model Attendance {
  id                String    @id @default(cuid())
  userId            String
  siteId            String?
  clockInAt         DateTime
  clockInGpsText    String?   // JSON文字列として保存
  clockOutAt        DateTime?
  clockOutGpsText   String?   // JSON文字列として保存
  inGeofenceIn      Boolean?  // 出勤時ジオフェンス内判定
  outGeofenceIn     Boolean?  // 退勤時ジオフェンス内判定
  breakAutoText     String?   // JSON文字列として保存
  workedMinutes     Int       @default(0)
  overtimeMinutes   Int       @default(0)
  nightMinutes      Int       @default(0) // 深夜労働分
  holidayMinutes    Int       @default(0) // 休日労働分
  status            String    @default("OPEN") // OPEN, CLOSED, PENDING, APPROVED
  correctionRequestId String?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User  @relation(fields: [userId], references: [id])
  site Site? @relation(fields: [siteId], references: [id])
}

// アラートテーブル
model Alert {
  id         String      @id @default(cuid())
  companyId  String
  userId     String?
  kind       String      // OVERTIME_WARNING, REPORT_MISSING, etc
  level      String      // INFO, WARNING, CRITICAL
  title      String
  message    String
  payloadText String?    // JSON文字列として保存
  occurredAt DateTime    @default(now())
  resolvedAt DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

// 監査ログテーブル
model AuditLog {
  id         String   @id @default(cuid())
  companyId  String
  actorId    String
  entity     String   // テーブル名
  entityId   String   // 対象レコードID
  action     String   // CREATE, UPDATE, DELETE
  beforeText String?  // JSON文字列として保存
  afterText  String?  // JSON文字列として保存
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id])
  actor   User    @relation(fields: [actorId], references: [id])
}